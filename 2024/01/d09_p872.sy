;;; version: 0.2.3
(defmacro leetcode [fnname *examples]
  (return `(do (class Solution []
                      (def ~fnname [self *args **kwargs]
                        (return (solution *args **kwargs))))
               ~(ife examples
                     `(list (map (lambda [x] (print (solution *x)))
                                 [~@examples]))
                     None))))

(defmacro fn [*body]
  (return `(lambda ~@body)))

(defmacro conde [*body]
  (def recur [*body]
    (= [test then *orelse] body)
    (if (< (len body) 4)
        (return `(ife ~test ~then ~@orelse))
        (return `(ife ~test ~then ~(recur *orelse)))))
  (return (recur *body)))

(def solution [root1 root2]
  (def dfs [node]
    (return (conde (is node None) []
                   (and (is node.left None) (is node.right None)) [node.val]
                   (+ (dfs node.left) (dfs node.right)))))
  (return (== (dfs root1) (dfs root2))))

(leetcode leafSimilar)
