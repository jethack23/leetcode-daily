;;; version: 0.2.3
(defmacro leetcode [fnname *examples]
  (return `(do (class Solution []
                      (def ~fnname [self *args **kwargs]
                        (return (solution *args **kwargs))))
               ~(ife examples
                     `(list (map (lambda [x] (print (solution *x)))
                                 [~@examples]))
                     None))))

(defmacro fn [*body]
  (return `(lambda ~@body)))

(from collections [defaultdict])
(from functools [cache])

(def solution [nums]
  (= occurence (defaultdict list))
  (for [i n] (enumerate nums)
    (.append (sub occurence n) i))
  (= l (len nums))
  (= dp [(* [0] l) for _ in (range l)])
  (= rst 0)
  (for i (range 1 (- l 1))
    (for j (range (+ i 1) l)
      (= t (- (* 2 (sub nums i)) (sub nums j)))
      (if (in t occurence)
          (for k (sub occurence t)
            (if (>= k i) (break))
            (+= (sub dp i j) (+ (sub dp k i) 1))))
      (+= rst (sub dp i j))))
  (return rst))

(leetcode numberOfArithmeticSlices
          [[2 4 6 8 10]]
          [[7 7 7 7 7]])
