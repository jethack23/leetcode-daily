;;; version: 0.2.3
(defmacro leetcode [fnname *examples]
  (return `(do (class Solution []
                      (def ~fnname [self *args **kwargs]
                        (return (solution *args **kwargs))))
               ~(ife examples
                     `(list (map (lambda [x] (print (solution *x)))
                                 [~@examples]))
                     None))))

(defmacro fn [*body]
  (return `(lambda ~@body)))

(from collections [defaultdict])
(from functools [cache])

(def solution [nums]
  (= occurence (defaultdict list))
  (for [i n] (enumerate nums)
    (.append (sub occurence n) i))
  (deco cache
        (def dp [i j]
          (= rst 0)
          (= d (- (sub nums j) (sub nums i)))
          (for k (filter (fn [x] (< x i))
                         (sub occurence (- (sub nums i) d)))
            (+= rst (+ (dp k i) 1)))
          (return rst)))
  (= l (len nums))
  (= rst 0)
  (for i (range 1 (- l 1))
    (for j (range (+ i 1) l)
      (+= rst (dp i j))))
  (return rst))

(leetcode numberOfArithmeticSlices
          [[2 4 6 8 10]]
          [[7 7 7 7 7]])
